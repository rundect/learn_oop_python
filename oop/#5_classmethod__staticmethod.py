
"""
Методы класса (classmethod) и статические методы (staticmethod)
https://proproprogs.ru/python_oop/metody-klassa-classmethod-i-staticheskie-metody-staticmethod

Обычные методы, как правило, вызываются из экземпляров классов и работают с атрибутами экземпляров и атрибутами
классов. Методы классов обычно вызываются через класс, реже через его экземпляры и имеют доступ только к атрибутам
самого класса, в котором объявлены. Наконец, статические методы – это совершенно изолированные функции,
которые работают только с параметрами, прописанными в ней самой и не имеют доступа к атрибутам класса или его
экземпляров.
Поэтому, если вам нужен метод, который работает с атрибутами объектов класса, то это обычное определение функций
внутри класса с первым параметром self. Если метод работает только с атрибутами класса, то возможно, имеет смысл его
определить как метод класса и тогда можно будет вызывать без ссылки на объект этого класса. Третий тип, статические
методы часто определяют как вспомогательные, сервисные, связанные с логикой работы самого класса.
"""


class Vector:
    MIN_COORD = 0
    MAX_COORD = 100

    def __init__(self, x, y):
        self.x = self.y = 0
        if self.validate(x) and self.validate(y):
            self.x = x
            self.y = y

        print(Vector.norm2(self.x, self.y))

        """
        Обратите внимание, мы здесь обращаемся к методу класса через пространство имен Vector. 
        Но также можем прописать и self:
        if self.validate(x) and self.validate(y):
        В этом случае интерпретатор Python сам подставит нужный класс в параметр cls данного метода, так как экземпляр 
        содержит информацию о классе, от которого был образован. 
        """

    def get_coord(self):
        return self.x, self.y

    """
    validate - метод класса который проверяет, 
    попадает ли значение arg в диапазон [MIN_COORD; MAX_COORD]. Обратите внимание, у методов класса (когда мы 
    используем декоратор classmethod) первым параметром идет cls – ссылка на класс, а не self – ссылка на объект 
    класса. Это означает, что данный метод может обращаться только к атрибутам текущего класса, но не к локальным 
    свойствам его экземпляров.
    """
    @classmethod
    def validate(cls, arg):
        return cls.MIN_COORD <= arg <= cls.MAX_COORD

    """
    Статические методы, определяются декоратором @staticmethod. Это методы, которые не имеют 
    доступа ни к атрибутам класса, ни к атрибутам его экземпляров, то есть, некая независимая, самостоятельная функция, 
    объявленная внутри класса. Обычно, это делают для удобства, т.к. их функционал так или иначе связан с тематикой 
    класса. 
    """
    @staticmethod
    def norm2(x, y):
        return x*x + y*y


v = Vector(10, 20)
coord = v.get_coord()
print(coord)

"""
Мало того, этот метод можно теперь напрямую вызывать из класса, не передавая ссылку на экземпляр, как это было при 
вызове обычных методов через класс. Здесь пользователь класса Vector может совершенно спокойно вызывать метод 
validate(), не создавая никаких объектов. Но «платой» за это является ограниченность метода: он может работать 
только с атрибутами класса, но не объекта, что, в общем то, естественно, так как у него изначально нет ссылки на 
объект. Во всем остальном этот метод работает абсолютно также, как и любой другой метод, объявленный в классе. 
"""
res = Vector.validate(5)
print(res)

res = Vector.norm2(5, 6)

