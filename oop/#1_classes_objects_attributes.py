
"""
Классы и объекты. Атрибуты классов и объектов
https://proproprogs.ru/python_oop/klassy-i-obekty-atributy-klassov-i-obektov
"""


class Point:
    color = 'red'
    circle = 2


"""
-0-
Переменные внутри класса обычно называются атрибутами класса или его свойствами
Класс Point образует пространство имен, в данном случае с именем Point, в котором находятся две переменные color и 
circle. И мы можем обращаться к ним, используя синтаксис для пространства имен, например:
Point.color = 'black'
"""
print(Point.color)
Point.color = 'black'
print(Point.color)

"""
-1-
А чтобы увидеть все атрибуты класса можно обратиться к специальной коллекции __dict__:
"""
print(Point.__dict__)

"""
-2-
Для создания объекта класса Point достаточно после его имени прописать круглые скобки:
"""
a = Point()
b = Point()

"""
-2.1-
Имя класса здесь выступает в качестве типа данных.
"""
print(type(a))
print(type(a) == Point)
print(isinstance(a, Point))

"""
-3-
Во-первых, объекты a и b образуют свое пространство имен – пространство имен экземпляров класса и, во-вторых, не 
содержат никаких собственных атрибутов. Свойства color и circle принадлежат непосредственно классу Point и находятся 
в нем, а объекты a и b лишь имеют ссылки на эти атрибуты класса."""

Point.circle = 1
"""
-4-
В обоих объектах это свойство стало равно 1.Если посмотреть коллекцию __dict__ у объектов, то она будет 
пустой, так как в наших экземплярах отсутствуют какие-либо атрибуты. Но, тем не менее, мы можем через 
них обращаться к атрибутам класса
"""
print(a.__dict__)

a.color = 'green'
"""
-5-
Через переменную a обращаемся к пространству имен уже экземпляра класса и оператор присваивания в Python создает 
новую переменную, если она отсутствует в текущей локальной области видимости, то есть, создается атрибут color уже 
непосредственно в объекте a. То есть, мы с вами создали локальное свойство в объекте a. Этот момент нужно очень 
хорошо знать и понимать. На этом принципе в Python построено формирование атрибутов классов и локальных атрибутов их 
экземпляров
"""

# -------------Изменение, добавление и удаление атрибутов класса-------------
Point.type_pt = 'disc'
setattr(Point, 'prop', 1)
setattr(Point, 'type_pt', 'square')

print(Point.circle)

"""При обращении к несуществующему атрибуту класса, например:"""
# Point.a
"""возникнет ошибка. Этого можно избежать, если воспользоваться специальной встроенной функцией: """
getattr(Point, 'a', False)

del Point.prop
"""Если повторить эту команду и попытаться удалить несуществующий атрибут, возникнет ошибка. Поэтому перед удалением 
рекомендуется проверять существование удаляемого свойства. Делается это с помощью функции hasattr:"""
hasattr(Point, 'prop')

delattr(Point, 'type_pt')

# -------------Атрибуты экземпляров классов-------------

"""Атрибуты color и circle класса Point – это общие данные для всех объектов этого класса. А вот координаты точек должны 
принадлежать его экземплярам. Поэтому для объектов a и b мы определим локальные свойства x и y:"""

a.x = 1
a.y = 2
b.x = 10
b.y = 20

"""
В любом классе языка Python мы можем прописывать его описание в виде начальной строки, например, так:
"""


class Point:
    """Класс для представления координат точек на плоскости"""
    color = 'red'
    circle = 2


print(Point.__doc__)
