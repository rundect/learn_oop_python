
"""
Метаклассы. Объект type
https://proproprogs.ru/python_oop/python-metaklassy-obekt-type

-0-
Булевы значения, строки, числа, списки, словари и т.п. все это объекты в языке Python. И эти объекты образованы от
соответствующих классов (типов данных): bool, str, int, float, list, dict, функции и т.д. Но эти классы также
являются и объектами, потому что все в Python – это объекты, даже классы. Да, классы – это объекты, которые позволяют
создавать другие объекты с конкретным содержимым. А раз классы – это объекты, то должно быть нечто, что создает и их.
И это нечто в Python называется метаклассом. Причем, метакласс – это тоже объект (в Python все объекты). Но это
объект особого рода, который нельзя динамически порождать каким-нибудь другим мета-метаклассом. Он является вершиной,
отправной точкой для создания обычных классов и, как следствие, их объектов.

Но что является метаклассом в языке Python? Наверное, вас немного удивит, но это давно знакомый вам объект
type, который мы использовали для определения типов объектов. Но это, если он вызывается с одним аргументом.
Если ему передать три аргумента:
type(<имя класса>, <кортеж родительских классов>, <словарь с атрибутами и их значениями>)
то данный объект начинает работать совершенно по-другому, а именно, создает (динамически) новый класс, новый
тип данных в программе.
"""

print(type(int))
print(type(bool))


class A:
    pass


print(type(A))


class Point:
    MAX_COORD = 100
    MIN_COORD = 0


class B1:
    pass


class B2:
    pass


A = type('Point', (B1, B2), {'MAX_COORD': 100, 'MIN_COORD': 0})
"""
-1-
Здесь переменная A – ссылка на новый созданный класс с именем Point. Да, так как классы – это тоже объекты, 
то мы можем на них ссылаться через разные переменные. И, далее, можно создать экземпляр этого класса, 
используя переменную A:
"""
pt = A()
"""
-2-
Только что динамически в программе сформировали новый класс через метакласс type и увидели, что новый класс 
корректно работает – создает свои экземпляры
"""
print(A.__mro__)



