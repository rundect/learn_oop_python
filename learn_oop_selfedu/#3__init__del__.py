"""
Инициализатор __init__ и финализатор __del__
https://proproprogs.ru/python_oop/inicializator-init-i-finalizator-del
"""


class Point:
    color = 'red'
    circle = 2

    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __del__(self):
        print("Удаление экземпляра: " + str(self))


pt = Point(1, 2)
# pt.set_coords(1, 2)
print(pt.__dict__)

"""
Вначале происходит создание объекта в памяти устройства. Непосредственно перед его созданием вызывается магический 
метод __new__ (О нем мы еще будем говорить). Затем, после успешного создания объекта, вызывается магический метод 
__init__ для начальной инициализации созданного объекта. В результате, у нас появляются два локальных атрибута x и y.
"""

"""После запуска программы видим, что объект в конце программы действительно был удален и вызван метод __del__. Но, 
здесь у вас может возникнуть вопрос: а когда и в какой момент вообще происходит удаление объектов. Мы же в программе 
это явно нигде не указываем? Работает все достаточно просто. Интерпретатор языка Python имеет, так называемый, 
сборщик мусора. Это алгоритм, который отслеживает объекты и как только они становятся ненужными, удаляет их. Но как 
он определяет нужный объект или ненужный? Все очень просто. Пока на какой-либо объект ведет хотя бы одна внешняя 
ссылка, то он считается используемым и сохраняется в памяти. Как только все внешние ссылки пропадают, то сборщик 
мусора его уничтожает (освобождает память, которую он занимал). """
