from accessify import private, protected

"""
Режимы доступа public, private, protected. Сеттеры и геттеры
https://proproprogs.ru/python_oop/rezhimy-dostupa-public-private-protected-settery-i-gettery

Основа механизма инкапсуляции - ограничения доступа к данным и методам класса извне
В Python возможны следующие варианты доступа к данным:
attribute (без одного или двух подчеркиваний вначале) – публичное свойство (public);
_attribute (с одним подчеркиванием) – режим доступа protected (служит для обращения внутри класса и во всех его
дочерних классах)
__attribute (с двумя подчеркиваниями) – режим доступа private (служит для обращения только внутри класса).
"""


class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y


pt = Point(1, 2)
print(pt.x, pt.y)
pt.x = 200
pt.y = "coord_y"


class PointProtected:
    def __init__(self, x=0, y=0):
        self._x = x
        self._y = y


"""
Нижнее подчеркивание должно предостерегать программиста от использования этого свойства вне класса. Впоследствии 
это может стать причиной непредвиденных ошибок. Например, изменится версия класса и такое свойство может перестать 
существовать, т.к. никто не предполагал доступа к нему извне. Так что, к таким атрибутам лучше не обращаться напрямую 
– одно нижнее подчеркивание указывает нам, что это внутренние, служебные переменные
"""
pt = PointProtected(1, 2)
print(pt._x, pt._y)


class PointPrivate:
    def __init__(self, x=0, y=0):
        self.__x = self.__y = 0

        if self.__check_value(x) and self.__check_value(y):
            self.__x = x
            self.__y = y

    def get_coord(self):
        return self.__x, self.__y

    """
    Назначение интерфейсных методов не только передавать значения между приватными атрибутами класса, но и проверять 
    их корректность. Например, в нашем случае координаты должны быть числами. Поэтому, прежде чем обновлять значения 
    переменных, следует проверить их тип данных. Для этого можно воспользоваться функцией type и записать сеттер 
    следующим образом
    """

    def set_coord(self, x, y):
        # if type(x) in (int, float) and type(y) in (int, float):
        if self.__check_value(x) and self.__check_value(y):
            self.__x = x
            self.__y = y
        else:
            raise ValueError("Координаты должны быть числами")

    @classmethod
    def __check_value(cls, x):
        return type(x) in (int, float)
    # @private
    # @classmethod
    # def check_value(cls, x):
    #     return type(x) in (int, float)


pt = PointPrivate(1, 2)
# print(pt.__x, pt.__y)
pt.set_coord(10, 20)
"""
После запуска программы видим измененные координаты точки. В результате, мы с вами определили два вспомогательных 
метода: set_coord и get_coord, через которые предполагается работа с защищенными данными класса. Такие методы в ООП 
называются сеттерами и геттерами или еще интерфейсными методами. 
"""
print(pt.get_coord())
"""
Зачем понадобилось в классах создавать приватные атрибуты да еще и определять дополнительно методы для работы с ними 
извне. Я об этом уже говорил на самом первом занятии по ООП, когда объяснял принцип инкапсуляции. Но, скажу еще раз. 
Класс в ООП следует воспринимать как некое единое целое, и чтобы случайно или намеренно не нарушить целостность 
работы алгоритма внутри этого класса, то следует взаимодействовать с ним только через публичные свойства и методы. В 
этом суть принципа инкапсуляции. Опять же, представьте автомобиль, в котором согласованно работают тысячи узлов. А 
управление им предполагается только через разрешенные интерфейсы: руль, коробка передач, педали газа и тормоза и т.п. 
Если во время движения вмешиваться напрямую в его узлы, например, будем на ходу спускать воздух из шин, то, наверное, 
ничего хорошего не получится. То же самое, можно сказать и о программисте, который намеренно обходит запрет и 
обращается к скрытым атрибутам класса напрямую, а не через сеттеры или геттеры. Так делать не нужно. 
"""
pt.set_coord('1', 2)


"""
В Python можно относительно легко обратиться и к приватным атрибутам извне. Если распечатать все атрибуты экземпляра
"""
print(dir(pt))
print(pt._PointPrivate__x, pt._PointPrivate__y)


"""Если у вас появилась необходимость лучше защитить методы класса от доступа извне, то это можно сделать с помощью 
модуля accessify. Для его установки нужно выполнить команду: 
pip install accessify
И, затем, импортировать из него два декоратора:
from accessify import private, protected
Далее, нужный декоратор просто применяем к методу и он становится либо приватным (private), либо защищенным (protected):
    @private
    @classmethod
    def check_value(cls, x):
        return type(x) in (int, float)
Все, теперь мы можем обратиться к check_value только внутри класса, но не извне:
"""
# pt.check_value(5)
